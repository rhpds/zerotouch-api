# Check with the latest version of the OpenAPI spec at https://swagger.io/specification/
openapi: 3.1.0
info:
  title: Swagger Zero Touch API - OpenAPI 3.0
  description: API to manage Catalog Items as a part of Zero Touch POC
  version: 1.0.0

servers:
  - url: http://localhost:8080

tags:
  - name: Catalog Items
    description: Getting information about Catalog Items
  - name: Provisioning
    description: Managing environment provisioning
  - name: Admin
    description: Administration

paths:
  /health:
    get:
      tags:
        - Admin
      summary: Health check
      description: Health check
      operationId: health
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"

  /catalogItems:
    get:
      tags:
        - Catalog Items
      summary: List all Catalog Items
      description: List all Catalog Items
      operationId: listCatalogItems
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CatalogItem"

  /catalogItems/{name}:
    get:
      tags:
        - Catalog Items
      summary: Get a Catalog Item
      description: Get a Catalog Item by Name
      operationId: getCatalogItem
      parameters:
        - name: name
          in: path
          description: Catalog Item Name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CatalogItem"
        "404":
          description: Catalog Item not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /serviceRequest:
    post:
      tags:
        - Provisioning
      summary: Create a service request for a new provision
      description: Create a service request (ResourceClaim) for a new provision
      operationId: createServiceRequest
      parameters:
        - name: X-Grecaptcha-Token
          in: header
          description: Google Recaptcha Token
          schema:
            type: string
      requestBody:
        description: Provision details to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProvisionParams"
      responses:
        "201":
          description: Created
          headers:
            Location:
              schema:
                type: string
              description: Location of the new provision
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionInfo"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /serviceRequest/{name}:
    get:
      tags:
        - Provisioning
      summary: Get status of service request for provision
      description: Get status of service request for provision
      operationId: getServiceRequestStatus
      parameters:
        - name: name
          in: path
          description: Provision name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionStatus"
        "202":
          description: Status summary not yet available for this provision
        "404":
          description: Catalog Item not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - Provisioning
      summary: Service request to destroy provision
      description: Delete service request and destroy provision by name
      operationId: deleteServiceRequest
      parameters:
        - name: name
          in: path
          description: Provision name
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /ratings/{name}:
    get:
      tags:
        - Ratings
      summary: Get Catalog Item ratings
      description: Get Catalog Item ratings
      operationId: getRating
      parameters:
        - name: name
          in: path
          description: Catalog Item name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CatalogItemRating"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /ratings:
    post:
      tags:
        - Ratings
      summary: Create a new rating for a provisioned item
      description: Create a new ratign for a provisioned item
      operationId: createRating
      requestBody:
        description: Rating details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RatingDetails"
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    CatalogItem:
      type: object
      properties:
        id:
          type: string
          example: "87e22ef3-fa8b-4a81-8b00-bf3d1cb0162f"
        Name:
          type: string
          example: "gpte.shared-workload-lpe-automation-controller.prod"
        DisplayName:
          type: string
          example: "LPE: Red Hat Ansible Automation Platform Automation Controller"
        Description:
          type: string
          example: "Provision and automation controller project with an operator installed."
        DescriptionFormat:
          type: string
          example: "html"
        Provider:
          type: string
          example: "RHDP"
      required:
        - id
        - Name
        - DisplayName
        - Description
        - DescriptionFormat
        - Provider
    CatalogItemRating:
      type: object
      properties:
        RatingScore:
          type: string
          example: "4.5"
        TotalRatings:
          type: string
          example: "15"
      required:
        - RatingScore
        - TotalRatings
    RatingDetails:
      type: object
      properties:
        ProvisionName:
          type: string
          example: "a904e6ba-ab62-4a16-9581-9f93d4720188"
        Email:
          type: string
          example: "user@server.com"
        Rating:
          type: integer
          example: 4
        Comment:
          type: string
          example: "My comment"
        Useful:
          type: string
          example: "yes"
      required:
        - ProvisionName
        - Email
    ProvisionParams:
      type: object
      properties:
        Name:
          type: string
          example: "test.babylon-empty-config.prod"
        ProviderName:
          type: string
          example: "tests.babylon-empty-config.prod"
        Purpose:
          type: string
          example: "Testing"
        Start:
          type: string
          format: date-time
          example: "2023-08-15T01:23:45Z"
        Stop:
          type: string
          format: date-time
          example: "2023-08-16T01:23:45Z"
      required:
        - Name
        - ProviderName
        - Purpose
        - Start
    ProvisionInfo:
      type: object
      properties:
        Name:
          type: string
          example: "test-auto-18.babylon-empty-config.prod"
        UID:
          type: string
          example: "73d0ea45-f0cf-4db6-9a10-772c80e09139"
        CreatedAt:
          type: string
          format: date-time
          example: "2023-08-15T01:23:45Z"
      required:
        - Name
        - UID
        - CreatedAt
    ProvisionStatus:
      type: object
      properties:
        GUID:
          type: string
          example: "892hq"
        labUserInterfaceUrl:
          type: string
          example: "http://bastion.32s34.sandbox9988.opentls.com:8080"
        runtimeDefault:
          type: string
          example: "4h"
        runtimeMaximum:
          type: string
          example: "8h"
        state:
          type: string
          example: "stopped"
        lifespanEnd:
          type: string
          example: "2023-08-15T01:23:45Z"
      required:
        - GUID
        - runtimeDefault
        - runtimeMaximum
        - state
        - lifespanEnd
    Status:
      type: object
      properties:
        status:
          type: string
          enum:
            - OK
            - ERROR
          example: OK
        message:
          type: string
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: Error code
          example: 500
        message:
          type: string
          description: Error message
          example: "Internal Server Error"
      required:
        - code
        - message
